<?php
/**
 * DeploymentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Staatic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staatic API documentation
 *
 * This is the Staatic API. You can find out more about Staatic at [https://staatic.com](https://staatic.com).
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: contact@staatic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Staatic\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Staatic\Api\ApiException;
use Staatic\Api\Configuration;
use Staatic\Api\HeaderSelector;
use Staatic\Api\ObjectSerializer;

/**
 * DeploymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Staatic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeploymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDeployment' => [
            'application/json',
        ],
        'getDeploymentById' => [
            'application/json',
        ],
        'getDeployments' => [
            'application/json',
        ],
        'getSiteFiles' => [
            'application/json',
        ],
        'updateDeployment' => [
            'application/json',
        ],
        'uploadDeploymentFile' => [
            'application/octet-stream',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDeployment
     *
     * Creates a new deployment
     *
     * @param  \Staatic\Api\Model\CreateDeploymentRequest $create_deployment_request Deployment to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeployment'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function createDeployment($create_deployment_request = null, string $contentType = self::contentTypes['createDeployment'][0])
    {
        list($response) = $this->createDeploymentWithHttpInfo($create_deployment_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeploymentWithHttpInfo
     *
     * Creates a new deployment
     *
     * @param  \Staatic\Api\Model\CreateDeploymentRequest $create_deployment_request Deployment to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeployment'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeploymentWithHttpInfo($create_deployment_request = null, string $contentType = self::contentTypes['createDeployment'][0])
    {
        $request = $this->createDeploymentRequest($create_deployment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Staatic\Api\Model\Deployment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Deployment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Deployment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Deployment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Deployment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeploymentAsync
     *
     * Creates a new deployment
     *
     * @param  \Staatic\Api\Model\CreateDeploymentRequest $create_deployment_request Deployment to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeploymentAsync($create_deployment_request = null, string $contentType = self::contentTypes['createDeployment'][0])
    {
        return $this->createDeploymentAsyncWithHttpInfo($create_deployment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeploymentAsyncWithHttpInfo
     *
     * Creates a new deployment
     *
     * @param  \Staatic\Api\Model\CreateDeploymentRequest $create_deployment_request Deployment to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeploymentAsyncWithHttpInfo($create_deployment_request = null, string $contentType = self::contentTypes['createDeployment'][0])
    {
        $returnType = '\Staatic\Api\Model\Deployment';
        $request = $this->createDeploymentRequest($create_deployment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeployment'
     *
     * @param  \Staatic\Api\Model\CreateDeploymentRequest $create_deployment_request Deployment to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeploymentRequest($create_deployment_request = null, string $contentType = self::contentTypes['createDeployment'][0])
    {



        $resourcePath = '/v1/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_deployment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_deployment_request));
            } else {
                $httpBody = $create_deployment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeploymentById
     *
     * Gets a deployment by ID
     *
     * @param  string $id The deployment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeploymentById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error
     */
    public function getDeploymentById($id, string $contentType = self::contentTypes['getDeploymentById'][0])
    {
        list($response) = $this->getDeploymentByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDeploymentByIdWithHttpInfo
     *
     * Gets a deployment by ID
     *
     * @param  string $id The deployment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeploymentById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeploymentByIdWithHttpInfo($id, string $contentType = self::contentTypes['getDeploymentById'][0])
    {
        $request = $this->getDeploymentByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\Deployment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Deployment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Deployment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Deployment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Deployment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeploymentByIdAsync
     *
     * Gets a deployment by ID
     *
     * @param  string $id The deployment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeploymentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeploymentByIdAsync($id, string $contentType = self::contentTypes['getDeploymentById'][0])
    {
        return $this->getDeploymentByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeploymentByIdAsyncWithHttpInfo
     *
     * Gets a deployment by ID
     *
     * @param  string $id The deployment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeploymentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeploymentByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDeploymentById'][0])
    {
        $returnType = '\Staatic\Api\Model\Deployment';
        $request = $this->getDeploymentByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeploymentById'
     *
     * @param  string $id The deployment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeploymentById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeploymentByIdRequest($id, string $contentType = self::contentTypes['getDeploymentById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDeploymentById'
            );
        }


        $resourcePath = '/v1/deployments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeployments
     *
     * Gets a collection of deployments
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeployments'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\DeploymentCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getDeployments($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, string $contentType = self::contentTypes['getDeployments'][0])
    {
        list($response) = $this->getDeploymentsWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeploymentsWithHttpInfo
     *
     * Gets a collection of deployments
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeployments'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\DeploymentCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeploymentsWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, string $contentType = self::contentTypes['getDeployments'][0])
    {
        $request = $this->getDeploymentsRequest($page, $per_page, $sort, $direction, $site_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\DeploymentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\DeploymentCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\DeploymentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\DeploymentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\DeploymentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeploymentsAsync
     *
     * Gets a collection of deployments
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeployments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeploymentsAsync($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, string $contentType = self::contentTypes['getDeployments'][0])
    {
        return $this->getDeploymentsAsyncWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeploymentsAsyncWithHttpInfo
     *
     * Gets a collection of deployments
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeployments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeploymentsAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, string $contentType = self::contentTypes['getDeployments'][0])
    {
        $returnType = '\Staatic\Api\Model\DeploymentCollection';
        $request = $this->getDeploymentsRequest($page, $per_page, $sort, $direction, $site_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeployments'
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeployments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeploymentsRequest($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, string $contentType = self::contentTypes['getDeployments'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling DeploymentsApi.getDeployments, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DeploymentsApi.getDeployments, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DeploymentsApi.getDeployments, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/deployments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $site_id,
            'site_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSiteFiles
     *
     * Gets a collection of deployment files for the specified site
     *
     * @param  string $id The site ID (required)
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSiteFiles'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\DeploymentFileCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getSiteFiles($id, $page = null, $per_page = null, $sort = null, $direction = null, string $contentType = self::contentTypes['getSiteFiles'][0])
    {
        list($response) = $this->getSiteFilesWithHttpInfo($id, $page, $per_page, $sort, $direction, $contentType);
        return $response;
    }

    /**
     * Operation getSiteFilesWithHttpInfo
     *
     * Gets a collection of deployment files for the specified site
     *
     * @param  string $id The site ID (required)
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSiteFiles'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\DeploymentFileCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteFilesWithHttpInfo($id, $page = null, $per_page = null, $sort = null, $direction = null, string $contentType = self::contentTypes['getSiteFiles'][0])
    {
        $request = $this->getSiteFilesRequest($id, $page, $per_page, $sort, $direction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\DeploymentFileCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\DeploymentFileCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\DeploymentFileCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\DeploymentFileCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\DeploymentFileCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSiteFilesAsync
     *
     * Gets a collection of deployment files for the specified site
     *
     * @param  string $id The site ID (required)
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSiteFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSiteFilesAsync($id, $page = null, $per_page = null, $sort = null, $direction = null, string $contentType = self::contentTypes['getSiteFiles'][0])
    {
        return $this->getSiteFilesAsyncWithHttpInfo($id, $page, $per_page, $sort, $direction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSiteFilesAsyncWithHttpInfo
     *
     * Gets a collection of deployment files for the specified site
     *
     * @param  string $id The site ID (required)
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSiteFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSiteFilesAsyncWithHttpInfo($id, $page = null, $per_page = null, $sort = null, $direction = null, string $contentType = self::contentTypes['getSiteFiles'][0])
    {
        $returnType = '\Staatic\Api\Model\DeploymentFileCollection';
        $request = $this->getSiteFilesRequest($id, $page, $per_page, $sort, $direction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSiteFiles'
     *
     * @param  string $id The site ID (required)
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSiteFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSiteFilesRequest($id, $page = null, $per_page = null, $sort = null, $direction = null, string $contentType = self::contentTypes['getSiteFiles'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSiteFiles'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling DeploymentsApi.getSiteFiles, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DeploymentsApi.getSiteFiles, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DeploymentsApi.getSiteFiles, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v1/sites/{id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeployment
     *
     * Updates an existing deployment
     *
     * @param  string $id The deployment ID (required)
     * @param  \Staatic\Api\Model\UpdateDeploymentRequest $update_deployment_request Deployment properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeployment'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function updateDeployment($id, $update_deployment_request = null, string $contentType = self::contentTypes['updateDeployment'][0])
    {
        list($response) = $this->updateDeploymentWithHttpInfo($id, $update_deployment_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeploymentWithHttpInfo
     *
     * Updates an existing deployment
     *
     * @param  string $id The deployment ID (required)
     * @param  \Staatic\Api\Model\UpdateDeploymentRequest $update_deployment_request Deployment properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeployment'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Deployment|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeploymentWithHttpInfo($id, $update_deployment_request = null, string $contentType = self::contentTypes['updateDeployment'][0])
    {
        $request = $this->updateDeploymentRequest($id, $update_deployment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\Deployment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Deployment' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Deployment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Deployment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Deployment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeploymentAsync
     *
     * Updates an existing deployment
     *
     * @param  string $id The deployment ID (required)
     * @param  \Staatic\Api\Model\UpdateDeploymentRequest $update_deployment_request Deployment properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeploymentAsync($id, $update_deployment_request = null, string $contentType = self::contentTypes['updateDeployment'][0])
    {
        return $this->updateDeploymentAsyncWithHttpInfo($id, $update_deployment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeploymentAsyncWithHttpInfo
     *
     * Updates an existing deployment
     *
     * @param  string $id The deployment ID (required)
     * @param  \Staatic\Api\Model\UpdateDeploymentRequest $update_deployment_request Deployment properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeploymentAsyncWithHttpInfo($id, $update_deployment_request = null, string $contentType = self::contentTypes['updateDeployment'][0])
    {
        $returnType = '\Staatic\Api\Model\Deployment';
        $request = $this->updateDeploymentRequest($id, $update_deployment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeployment'
     *
     * @param  string $id The deployment ID (required)
     * @param  \Staatic\Api\Model\UpdateDeploymentRequest $update_deployment_request Deployment properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeployment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeploymentRequest($id, $update_deployment_request = null, string $contentType = self::contentTypes['updateDeployment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateDeployment'
            );
        }



        $resourcePath = '/v1/deployments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_deployment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_deployment_request));
            } else {
                $httpBody = $update_deployment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadDeploymentFile
     *
     * Uploads a deployment file
     *
     * @param  string $id The deployment ID (required)
     * @param  string $path The file path (required)
     * @param  \SplFileObject $body The deployment file payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDeploymentFile'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\DeploymentFile|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function uploadDeploymentFile($id, $path, $body = null, string $contentType = self::contentTypes['uploadDeploymentFile'][0])
    {
        list($response) = $this->uploadDeploymentFileWithHttpInfo($id, $path, $body, $contentType);
        return $response;
    }

    /**
     * Operation uploadDeploymentFileWithHttpInfo
     *
     * Uploads a deployment file
     *
     * @param  string $id The deployment ID (required)
     * @param  string $path The file path (required)
     * @param  \SplFileObject $body The deployment file payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDeploymentFile'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\DeploymentFile|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadDeploymentFileWithHttpInfo($id, $path, $body = null, string $contentType = self::contentTypes['uploadDeploymentFile'][0])
    {
        $request = $this->uploadDeploymentFileRequest($id, $path, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\DeploymentFile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\DeploymentFile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\DeploymentFile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\DeploymentFile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\DeploymentFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadDeploymentFileAsync
     *
     * Uploads a deployment file
     *
     * @param  string $id The deployment ID (required)
     * @param  string $path The file path (required)
     * @param  \SplFileObject $body The deployment file payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDeploymentFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDeploymentFileAsync($id, $path, $body = null, string $contentType = self::contentTypes['uploadDeploymentFile'][0])
    {
        return $this->uploadDeploymentFileAsyncWithHttpInfo($id, $path, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadDeploymentFileAsyncWithHttpInfo
     *
     * Uploads a deployment file
     *
     * @param  string $id The deployment ID (required)
     * @param  string $path The file path (required)
     * @param  \SplFileObject $body The deployment file payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDeploymentFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadDeploymentFileAsyncWithHttpInfo($id, $path, $body = null, string $contentType = self::contentTypes['uploadDeploymentFile'][0])
    {
        $returnType = '\Staatic\Api\Model\DeploymentFile';
        $request = $this->uploadDeploymentFileRequest($id, $path, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadDeploymentFile'
     *
     * @param  string $id The deployment ID (required)
     * @param  string $path The file path (required)
     * @param  \SplFileObject $body The deployment file payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadDeploymentFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadDeploymentFileRequest($id, $path, $body = null, string $contentType = self::contentTypes['uploadDeploymentFile'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling uploadDeploymentFile'
            );
        }

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling uploadDeploymentFile'
            );
        }



        $resourcePath = '/v1/deployments/{id}/files/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
