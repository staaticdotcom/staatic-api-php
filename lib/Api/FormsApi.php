<?php
/**
 * FormsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Staatic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Staatic API documentation
 *
 * This is the Staatic API. You can find out more about Staatic at [https://staatic.com](https://staatic.com).
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: contact@staatic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Staatic\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Staatic\Api\ApiException;
use Staatic\Api\Configuration;
use Staatic\Api\HeaderSelector;
use Staatic\Api\ObjectSerializer;

/**
 * FormsApi Class Doc Comment
 *
 * @category Class
 * @package  Staatic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FormsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createForm' => [
            'application/json',
        ],
        'createFormNotification' => [
            'application/json',
        ],
        'createFormSubmission' => [
            'application/json',
        ],
        'createFormTemplate' => [
            'application/json',
        ],
        'deleteForm' => [
            'application/json',
        ],
        'deleteFormNotification' => [
            'application/json',
        ],
        'deleteFormSubmission' => [
            'application/json',
        ],
        'deleteFormTemplate' => [
            'application/json',
        ],
        'getFormById' => [
            'application/json',
        ],
        'getFormNotificationById' => [
            'application/json',
        ],
        'getFormNotifications' => [
            'application/json',
        ],
        'getFormSubmissionById' => [
            'application/json',
        ],
        'getFormSubmissions' => [
            'application/json',
        ],
        'getFormTemplateById' => [
            'application/json',
        ],
        'getFormTemplates' => [
            'application/json',
        ],
        'getForms' => [
            'application/json',
        ],
        'updateForm' => [
            'application/json',
        ],
        'updateFormNotification' => [
            'application/json',
        ],
        'updateFormSubmission' => [
            'application/json',
        ],
        'updateFormTemplate' => [
            'application/json',
        ],
    ];

    /**
         * @param ClientInterface $client
         * @param Configuration   $config
         * @param HeaderSelector  $selector
         * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
         */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createForm
     *
     * Creates a new form
     *
     * @param  \Staatic\Api\Model\CreateFormRequest $create_form_request Form to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function createForm($create_form_request = null, string $contentType = self::contentTypes['createForm'][0])
    {
        list($response) = $this->createFormWithHttpInfo($create_form_request, $contentType);
        return $response;
    }

    /**
     * Operation createFormWithHttpInfo
     *
     * Creates a new form
     *
     * @param  \Staatic\Api\Model\CreateFormRequest $create_form_request Form to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFormWithHttpInfo($create_form_request = null, string $contentType = self::contentTypes['createForm'][0])
    {
        $request = $this->createFormRequest($create_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Staatic\Api\Model\Form' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Form' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Form', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Form';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Form',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFormAsync
     *
     * Creates a new form
     *
     * @param  \Staatic\Api\Model\CreateFormRequest $create_form_request Form to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormAsync($create_form_request = null, string $contentType = self::contentTypes['createForm'][0])
    {
        return $this->createFormAsyncWithHttpInfo($create_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFormAsyncWithHttpInfo
     *
     * Creates a new form
     *
     * @param  \Staatic\Api\Model\CreateFormRequest $create_form_request Form to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormAsyncWithHttpInfo($create_form_request = null, string $contentType = self::contentTypes['createForm'][0])
    {
        $returnType = '\Staatic\Api\Model\Form';
        $request = $this->createFormRequest($create_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createForm'
     *
     * @param  \Staatic\Api\Model\CreateFormRequest $create_form_request Form to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFormRequest($create_form_request = null, string $contentType = self::contentTypes['createForm'][0])
    {



        $resourcePath = '/v1/forms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_form_request));
            } else {
                $httpBody = $create_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFormNotification
     *
     * Creates a new form notification
     *
     * @param  \Staatic\Api\Model\CreateFormNotificationRequest $create_form_notification_request Form notification to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function createFormNotification($create_form_notification_request = null, string $contentType = self::contentTypes['createFormNotification'][0])
    {
        list($response) = $this->createFormNotificationWithHttpInfo($create_form_notification_request, $contentType);
        return $response;
    }

    /**
     * Operation createFormNotificationWithHttpInfo
     *
     * Creates a new form notification
     *
     * @param  \Staatic\Api\Model\CreateFormNotificationRequest $create_form_notification_request Form notification to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFormNotificationWithHttpInfo($create_form_notification_request = null, string $contentType = self::contentTypes['createFormNotification'][0])
    {
        $request = $this->createFormNotificationRequest($create_form_notification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Staatic\Api\Model\FormNotification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormNotification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormNotification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormNotification';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormNotification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFormNotificationAsync
     *
     * Creates a new form notification
     *
     * @param  \Staatic\Api\Model\CreateFormNotificationRequest $create_form_notification_request Form notification to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormNotificationAsync($create_form_notification_request = null, string $contentType = self::contentTypes['createFormNotification'][0])
    {
        return $this->createFormNotificationAsyncWithHttpInfo($create_form_notification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFormNotificationAsyncWithHttpInfo
     *
     * Creates a new form notification
     *
     * @param  \Staatic\Api\Model\CreateFormNotificationRequest $create_form_notification_request Form notification to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormNotificationAsyncWithHttpInfo($create_form_notification_request = null, string $contentType = self::contentTypes['createFormNotification'][0])
    {
        $returnType = '\Staatic\Api\Model\FormNotification';
        $request = $this->createFormNotificationRequest($create_form_notification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFormNotification'
     *
     * @param  \Staatic\Api\Model\CreateFormNotificationRequest $create_form_notification_request Form notification to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFormNotificationRequest($create_form_notification_request = null, string $contentType = self::contentTypes['createFormNotification'][0])
    {



        $resourcePath = '/v1/form-notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_form_notification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_form_notification_request));
            } else {
                $httpBody = $create_form_notification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFormSubmission
     *
     * Creates a new form submission
     *
     * @param  \Staatic\Api\Model\CreateFormSubmissionRequest $create_form_submission_request Form submission to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function createFormSubmission($create_form_submission_request = null, string $contentType = self::contentTypes['createFormSubmission'][0])
    {
        list($response) = $this->createFormSubmissionWithHttpInfo($create_form_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation createFormSubmissionWithHttpInfo
     *
     * Creates a new form submission
     *
     * @param  \Staatic\Api\Model\CreateFormSubmissionRequest $create_form_submission_request Form submission to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFormSubmissionWithHttpInfo($create_form_submission_request = null, string $contentType = self::contentTypes['createFormSubmission'][0])
    {
        $request = $this->createFormSubmissionRequest($create_form_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Staatic\Api\Model\FormSubmission' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormSubmission' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormSubmission', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormSubmission';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormSubmission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFormSubmissionAsync
     *
     * Creates a new form submission
     *
     * @param  \Staatic\Api\Model\CreateFormSubmissionRequest $create_form_submission_request Form submission to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormSubmissionAsync($create_form_submission_request = null, string $contentType = self::contentTypes['createFormSubmission'][0])
    {
        return $this->createFormSubmissionAsyncWithHttpInfo($create_form_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFormSubmissionAsyncWithHttpInfo
     *
     * Creates a new form submission
     *
     * @param  \Staatic\Api\Model\CreateFormSubmissionRequest $create_form_submission_request Form submission to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormSubmissionAsyncWithHttpInfo($create_form_submission_request = null, string $contentType = self::contentTypes['createFormSubmission'][0])
    {
        $returnType = '\Staatic\Api\Model\FormSubmission';
        $request = $this->createFormSubmissionRequest($create_form_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFormSubmission'
     *
     * @param  \Staatic\Api\Model\CreateFormSubmissionRequest $create_form_submission_request Form submission to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFormSubmissionRequest($create_form_submission_request = null, string $contentType = self::contentTypes['createFormSubmission'][0])
    {



        $resourcePath = '/v1/form-submissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_form_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_form_submission_request));
            } else {
                $httpBody = $create_form_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFormTemplate
     *
     * Creates a new form template
     *
     * @param  \Staatic\Api\Model\CreateFormTemplateRequest $create_form_template_request Form template to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function createFormTemplate($create_form_template_request = null, string $contentType = self::contentTypes['createFormTemplate'][0])
    {
        list($response) = $this->createFormTemplateWithHttpInfo($create_form_template_request, $contentType);
        return $response;
    }

    /**
     * Operation createFormTemplateWithHttpInfo
     *
     * Creates a new form template
     *
     * @param  \Staatic\Api\Model\CreateFormTemplateRequest $create_form_template_request Form template to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFormTemplateWithHttpInfo($create_form_template_request = null, string $contentType = self::contentTypes['createFormTemplate'][0])
    {
        $request = $this->createFormTemplateRequest($create_form_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Staatic\Api\Model\FormTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFormTemplateAsync
     *
     * Creates a new form template
     *
     * @param  \Staatic\Api\Model\CreateFormTemplateRequest $create_form_template_request Form template to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormTemplateAsync($create_form_template_request = null, string $contentType = self::contentTypes['createFormTemplate'][0])
    {
        return $this->createFormTemplateAsyncWithHttpInfo($create_form_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFormTemplateAsyncWithHttpInfo
     *
     * Creates a new form template
     *
     * @param  \Staatic\Api\Model\CreateFormTemplateRequest $create_form_template_request Form template to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFormTemplateAsyncWithHttpInfo($create_form_template_request = null, string $contentType = self::contentTypes['createFormTemplate'][0])
    {
        $returnType = '\Staatic\Api\Model\FormTemplate';
        $request = $this->createFormTemplateRequest($create_form_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFormTemplate'
     *
     * @param  \Staatic\Api\Model\CreateFormTemplateRequest $create_form_template_request Form template to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFormTemplateRequest($create_form_template_request = null, string $contentType = self::contentTypes['createFormTemplate'][0])
    {



        $resourcePath = '/v1/form-templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_form_template_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_form_template_request));
            } else {
                $httpBody = $create_form_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteForm
     *
     * Deletes an existing form
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteForm($id, string $contentType = self::contentTypes['deleteForm'][0])
    {
        $this->deleteFormWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteFormWithHttpInfo
     *
     * Deletes an existing form
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormWithHttpInfo($id, string $contentType = self::contentTypes['deleteForm'][0])
    {
        $request = $this->deleteFormRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormAsync
     *
     * Deletes an existing form
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormAsync($id, string $contentType = self::contentTypes['deleteForm'][0])
    {
        return $this->deleteFormAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormAsyncWithHttpInfo
     *
     * Deletes an existing form
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteForm'][0])
    {
        $returnType = '';
        $request = $this->deleteFormRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteForm'
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormRequest($id, string $contentType = self::contentTypes['deleteForm'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteForm'
            );
        }


        $resourcePath = '/v1/forms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFormNotification
     *
     * Deletes an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFormNotification($id, string $contentType = self::contentTypes['deleteFormNotification'][0])
    {
        $this->deleteFormNotificationWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteFormNotificationWithHttpInfo
     *
     * Deletes an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormNotificationWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormNotification'][0])
    {
        $request = $this->deleteFormNotificationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormNotificationAsync
     *
     * Deletes an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormNotificationAsync($id, string $contentType = self::contentTypes['deleteFormNotification'][0])
    {
        return $this->deleteFormNotificationAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormNotificationAsyncWithHttpInfo
     *
     * Deletes an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormNotificationAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormNotification'][0])
    {
        $returnType = '';
        $request = $this->deleteFormNotificationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFormNotification'
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormNotificationRequest($id, string $contentType = self::contentTypes['deleteFormNotification'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormNotification'
            );
        }


        $resourcePath = '/v1/form-notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFormSubmission
     *
     * Deletes an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFormSubmission($id, string $contentType = self::contentTypes['deleteFormSubmission'][0])
    {
        $this->deleteFormSubmissionWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteFormSubmissionWithHttpInfo
     *
     * Deletes an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormSubmissionWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormSubmission'][0])
    {
        $request = $this->deleteFormSubmissionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormSubmissionAsync
     *
     * Deletes an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormSubmissionAsync($id, string $contentType = self::contentTypes['deleteFormSubmission'][0])
    {
        return $this->deleteFormSubmissionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormSubmissionAsyncWithHttpInfo
     *
     * Deletes an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormSubmissionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormSubmission'][0])
    {
        $returnType = '';
        $request = $this->deleteFormSubmissionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFormSubmission'
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormSubmissionRequest($id, string $contentType = self::contentTypes['deleteFormSubmission'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormSubmission'
            );
        }


        $resourcePath = '/v1/form-submissions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFormTemplate
     *
     * Deletes an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFormTemplate($id, string $contentType = self::contentTypes['deleteFormTemplate'][0])
    {
        $this->deleteFormTemplateWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteFormTemplateWithHttpInfo
     *
     * Deletes an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFormTemplateWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormTemplate'][0])
    {
        $request = $this->deleteFormTemplateRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFormTemplateAsync
     *
     * Deletes an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormTemplateAsync($id, string $contentType = self::contentTypes['deleteFormTemplate'][0])
    {
        return $this->deleteFormTemplateAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFormTemplateAsyncWithHttpInfo
     *
     * Deletes an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFormTemplateAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteFormTemplate'][0])
    {
        $returnType = '';
        $request = $this->deleteFormTemplateRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFormTemplate'
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFormTemplateRequest($id, string $contentType = self::contentTypes['deleteFormTemplate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFormTemplate'
            );
        }


        $resourcePath = '/v1/form-templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormById
     *
     * Gets a form by ID
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error
     */
    public function getFormById($id, string $contentType = self::contentTypes['getFormById'][0])
    {
        list($response) = $this->getFormByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getFormByIdWithHttpInfo
     *
     * Gets a form by ID
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormByIdWithHttpInfo($id, string $contentType = self::contentTypes['getFormById'][0])
    {
        $request = $this->getFormByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\Form' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Form' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Form', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Form';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Form',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormByIdAsync
     *
     * Gets a form by ID
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormByIdAsync($id, string $contentType = self::contentTypes['getFormById'][0])
    {
        return $this->getFormByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormByIdAsyncWithHttpInfo
     *
     * Gets a form by ID
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getFormById'][0])
    {
        $returnType = '\Staatic\Api\Model\Form';
        $request = $this->getFormByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormById'
     *
     * @param  string $id The form ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormByIdRequest($id, string $contentType = self::contentTypes['getFormById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormById'
            );
        }


        $resourcePath = '/v1/forms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormNotificationById
     *
     * Gets a form notification by ID
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotificationById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error
     */
    public function getFormNotificationById($id, string $contentType = self::contentTypes['getFormNotificationById'][0])
    {
        list($response) = $this->getFormNotificationByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getFormNotificationByIdWithHttpInfo
     *
     * Gets a form notification by ID
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotificationById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormNotificationByIdWithHttpInfo($id, string $contentType = self::contentTypes['getFormNotificationById'][0])
    {
        $request = $this->getFormNotificationByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormNotification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormNotification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormNotification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormNotification';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormNotification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormNotificationByIdAsync
     *
     * Gets a form notification by ID
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotificationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormNotificationByIdAsync($id, string $contentType = self::contentTypes['getFormNotificationById'][0])
    {
        return $this->getFormNotificationByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormNotificationByIdAsyncWithHttpInfo
     *
     * Gets a form notification by ID
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotificationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormNotificationByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getFormNotificationById'][0])
    {
        $returnType = '\Staatic\Api\Model\FormNotification';
        $request = $this->getFormNotificationByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormNotificationById'
     *
     * @param  string $id The form notification ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotificationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormNotificationByIdRequest($id, string $contentType = self::contentTypes['getFormNotificationById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormNotificationById'
            );
        }


        $resourcePath = '/v1/form-notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormNotifications
     *
     * Gets a collection of form notifications
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotifications'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormNotificationCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getFormNotifications($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, string $contentType = self::contentTypes['getFormNotifications'][0])
    {
        list($response) = $this->getFormNotificationsWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $form_id, $contentType);
        return $response;
    }

    /**
     * Operation getFormNotificationsWithHttpInfo
     *
     * Gets a collection of form notifications
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotifications'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormNotificationCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormNotificationsWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, string $contentType = self::contentTypes['getFormNotifications'][0])
    {
        $request = $this->getFormNotificationsRequest($page, $per_page, $sort, $direction, $site_id, $form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormNotificationCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormNotificationCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormNotificationCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormNotificationCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormNotificationCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormNotificationsAsync
     *
     * Gets a collection of form notifications
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormNotificationsAsync($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, string $contentType = self::contentTypes['getFormNotifications'][0])
    {
        return $this->getFormNotificationsAsyncWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormNotificationsAsyncWithHttpInfo
     *
     * Gets a collection of form notifications
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormNotificationsAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, string $contentType = self::contentTypes['getFormNotifications'][0])
    {
        $returnType = '\Staatic\Api\Model\FormNotificationCollection';
        $request = $this->getFormNotificationsRequest($page, $per_page, $sort, $direction, $site_id, $form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormNotifications'
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormNotifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormNotificationsRequest($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, string $contentType = self::contentTypes['getFormNotifications'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FormsApi.getFormNotifications, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormNotifications, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormNotifications, must be bigger than or equal to 1.');
        }






        $resourcePath = '/v1/form-notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $site_id,
            'site_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form_id,
            'form_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormSubmissionById
     *
     * Gets a form submission by ID
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissionById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error
     */
    public function getFormSubmissionById($id, string $contentType = self::contentTypes['getFormSubmissionById'][0])
    {
        list($response) = $this->getFormSubmissionByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getFormSubmissionByIdWithHttpInfo
     *
     * Gets a form submission by ID
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissionById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormSubmissionByIdWithHttpInfo($id, string $contentType = self::contentTypes['getFormSubmissionById'][0])
    {
        $request = $this->getFormSubmissionByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormSubmission' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormSubmission' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormSubmission', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormSubmission';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormSubmission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormSubmissionByIdAsync
     *
     * Gets a form submission by ID
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormSubmissionByIdAsync($id, string $contentType = self::contentTypes['getFormSubmissionById'][0])
    {
        return $this->getFormSubmissionByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormSubmissionByIdAsyncWithHttpInfo
     *
     * Gets a form submission by ID
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormSubmissionByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getFormSubmissionById'][0])
    {
        $returnType = '\Staatic\Api\Model\FormSubmission';
        $request = $this->getFormSubmissionByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormSubmissionById'
     *
     * @param  string $id The form submission ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissionById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormSubmissionByIdRequest($id, string $contentType = self::contentTypes['getFormSubmissionById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormSubmissionById'
            );
        }


        $resourcePath = '/v1/form-submissions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormSubmissions
     *
     * Gets a collection of form submissions
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $status The form submission status to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissions'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormSubmissionCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getFormSubmissions($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, $status = null, $query = null, string $contentType = self::contentTypes['getFormSubmissions'][0])
    {
        list($response) = $this->getFormSubmissionsWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $form_id, $status, $query, $contentType);
        return $response;
    }

    /**
     * Operation getFormSubmissionsWithHttpInfo
     *
     * Gets a collection of form submissions
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $status The form submission status to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissions'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormSubmissionCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormSubmissionsWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, $status = null, $query = null, string $contentType = self::contentTypes['getFormSubmissions'][0])
    {
        $request = $this->getFormSubmissionsRequest($page, $per_page, $sort, $direction, $site_id, $form_id, $status, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormSubmissionCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormSubmissionCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormSubmissionCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormSubmissionCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormSubmissionCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormSubmissionsAsync
     *
     * Gets a collection of form submissions
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $status The form submission status to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormSubmissionsAsync($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, $status = null, $query = null, string $contentType = self::contentTypes['getFormSubmissions'][0])
    {
        return $this->getFormSubmissionsAsyncWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $form_id, $status, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormSubmissionsAsyncWithHttpInfo
     *
     * Gets a collection of form submissions
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $status The form submission status to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormSubmissionsAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, $status = null, $query = null, string $contentType = self::contentTypes['getFormSubmissions'][0])
    {
        $returnType = '\Staatic\Api\Model\FormSubmissionCollection';
        $request = $this->getFormSubmissionsRequest($page, $per_page, $sort, $direction, $site_id, $form_id, $status, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormSubmissions'
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $form_id The form ID to filter the result (optional)
     * @param  string $status The form submission status to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormSubmissionsRequest($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $form_id = null, $status = null, $query = null, string $contentType = self::contentTypes['getFormSubmissions'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FormsApi.getFormSubmissions, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormSubmissions, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormSubmissions, must be bigger than or equal to 1.');
        }








        $resourcePath = '/v1/form-submissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $site_id,
            'site_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $form_id,
            'form_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormTemplateById
     *
     * Gets a form template by ID
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplateById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error
     */
    public function getFormTemplateById($id, string $contentType = self::contentTypes['getFormTemplateById'][0])
    {
        list($response) = $this->getFormTemplateByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getFormTemplateByIdWithHttpInfo
     *
     * Gets a form template by ID
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplateById'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormTemplateByIdWithHttpInfo($id, string $contentType = self::contentTypes['getFormTemplateById'][0])
    {
        $request = $this->getFormTemplateByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormTemplateByIdAsync
     *
     * Gets a form template by ID
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormTemplateByIdAsync($id, string $contentType = self::contentTypes['getFormTemplateById'][0])
    {
        return $this->getFormTemplateByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormTemplateByIdAsyncWithHttpInfo
     *
     * Gets a form template by ID
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormTemplateByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getFormTemplateById'][0])
    {
        $returnType = '\Staatic\Api\Model\FormTemplate';
        $request = $this->getFormTemplateByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormTemplateById'
     *
     * @param  string $id The form template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormTemplateByIdRequest($id, string $contentType = self::contentTypes['getFormTemplateById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFormTemplateById'
            );
        }


        $resourcePath = '/v1/form-templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFormTemplates
     *
     * Gets a collection of form templates
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $name The template name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplates'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormTemplateCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getFormTemplates($page = null, $per_page = null, $sort = null, $direction = null, $name = null, $query = null, string $contentType = self::contentTypes['getFormTemplates'][0])
    {
        list($response) = $this->getFormTemplatesWithHttpInfo($page, $per_page, $sort, $direction, $name, $query, $contentType);
        return $response;
    }

    /**
     * Operation getFormTemplatesWithHttpInfo
     *
     * Gets a collection of form templates
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $name The template name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplates'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormTemplateCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormTemplatesWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $name = null, $query = null, string $contentType = self::contentTypes['getFormTemplates'][0])
    {
        $request = $this->getFormTemplatesRequest($page, $per_page, $sort, $direction, $name, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormTemplateCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormTemplateCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormTemplateCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormTemplateCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormTemplateCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormTemplatesAsync
     *
     * Gets a collection of form templates
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $name The template name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormTemplatesAsync($page = null, $per_page = null, $sort = null, $direction = null, $name = null, $query = null, string $contentType = self::contentTypes['getFormTemplates'][0])
    {
        return $this->getFormTemplatesAsyncWithHttpInfo($page, $per_page, $sort, $direction, $name, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormTemplatesAsyncWithHttpInfo
     *
     * Gets a collection of form templates
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $name The template name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormTemplatesAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $name = null, $query = null, string $contentType = self::contentTypes['getFormTemplates'][0])
    {
        $returnType = '\Staatic\Api\Model\FormTemplateCollection';
        $request = $this->getFormTemplatesRequest($page, $per_page, $sort, $direction, $name, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFormTemplates'
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $name The template name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFormTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormTemplatesRequest($page = null, $per_page = null, $sort = null, $direction = null, $name = null, $query = null, string $contentType = self::contentTypes['getFormTemplates'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FormsApi.getFormTemplates, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormTemplates, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getFormTemplates, must be bigger than or equal to 1.');
        }






        $resourcePath = '/v1/form-templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getForms
     *
     * Gets a collection of forms
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $name The form name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForms'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function getForms($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $name = null, $query = null, string $contentType = self::contentTypes['getForms'][0])
    {
        list($response) = $this->getFormsWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $name, $query, $contentType);
        return $response;
    }

    /**
     * Operation getFormsWithHttpInfo
     *
     * Gets a collection of forms
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $name The form name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForms'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormCollection|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFormsWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $name = null, $query = null, string $contentType = self::contentTypes['getForms'][0])
    {
        $request = $this->getFormsRequest($page, $per_page, $sort, $direction, $site_id, $name, $query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormCollection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFormsAsync
     *
     * Gets a collection of forms
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $name The form name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormsAsync($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $name = null, $query = null, string $contentType = self::contentTypes['getForms'][0])
    {
        return $this->getFormsAsyncWithHttpInfo($page, $per_page, $sort, $direction, $site_id, $name, $query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFormsAsyncWithHttpInfo
     *
     * Gets a collection of forms
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $name The form name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFormsAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $name = null, $query = null, string $contentType = self::contentTypes['getForms'][0])
    {
        $returnType = '\Staatic\Api\Model\FormCollection';
        $request = $this->getFormsRequest($page, $per_page, $sort, $direction, $site_id, $name, $query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getForms'
     *
     * @param  int $page The page of items to return (optional)
     * @param  int $per_page The number of items to return per page (optional)
     * @param  string $sort The field to sort the results by (optional)
     * @param  string $direction The direction to sort the results by (optional)
     * @param  string $site_id The site ID to filter the result (optional)
     * @param  string $name The form name to filter the result (optional)
     * @param  string $query Search query to filter the result (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getForms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFormsRequest($page = null, $per_page = null, $sort = null, $direction = null, $site_id = null, $name = null, $query = null, string $contentType = self::contentTypes['getForms'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FormsApi.getForms, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getForms, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling FormsApi.getForms, must be bigger than or equal to 1.');
        }







        $resourcePath = '/v1/forms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $site_id,
            'site_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateForm
     *
     * Updates an existing form
     *
     * @param  string $id The form ID (required)
     * @param  \Staatic\Api\Model\UpdateFormRequest $update_form_request Form properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function updateForm($id, $update_form_request = null, string $contentType = self::contentTypes['updateForm'][0])
    {
        list($response) = $this->updateFormWithHttpInfo($id, $update_form_request, $contentType);
        return $response;
    }

    /**
     * Operation updateFormWithHttpInfo
     *
     * Updates an existing form
     *
     * @param  string $id The form ID (required)
     * @param  \Staatic\Api\Model\UpdateFormRequest $update_form_request Form properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateForm'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\Form|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormWithHttpInfo($id, $update_form_request = null, string $contentType = self::contentTypes['updateForm'][0])
    {
        $request = $this->updateFormRequest($id, $update_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\Form' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Form' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Form', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\Form';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Form',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFormAsync
     *
     * Updates an existing form
     *
     * @param  string $id The form ID (required)
     * @param  \Staatic\Api\Model\UpdateFormRequest $update_form_request Form properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormAsync($id, $update_form_request = null, string $contentType = self::contentTypes['updateForm'][0])
    {
        return $this->updateFormAsyncWithHttpInfo($id, $update_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFormAsyncWithHttpInfo
     *
     * Updates an existing form
     *
     * @param  string $id The form ID (required)
     * @param  \Staatic\Api\Model\UpdateFormRequest $update_form_request Form properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormAsyncWithHttpInfo($id, $update_form_request = null, string $contentType = self::contentTypes['updateForm'][0])
    {
        $returnType = '\Staatic\Api\Model\Form';
        $request = $this->updateFormRequest($id, $update_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateForm'
     *
     * @param  string $id The form ID (required)
     * @param  \Staatic\Api\Model\UpdateFormRequest $update_form_request Form properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormRequest($id, $update_form_request = null, string $contentType = self::contentTypes['updateForm'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateForm'
            );
        }



        $resourcePath = '/v1/forms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_form_request));
            } else {
                $httpBody = $update_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFormNotification
     *
     * Updates an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  \Staatic\Api\Model\UpdateFormNotificationRequest $update_form_notification_request Form notification properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function updateFormNotification($id, $update_form_notification_request = null, string $contentType = self::contentTypes['updateFormNotification'][0])
    {
        list($response) = $this->updateFormNotificationWithHttpInfo($id, $update_form_notification_request, $contentType);
        return $response;
    }

    /**
     * Operation updateFormNotificationWithHttpInfo
     *
     * Updates an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  \Staatic\Api\Model\UpdateFormNotificationRequest $update_form_notification_request Form notification properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormNotification'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormNotification|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormNotificationWithHttpInfo($id, $update_form_notification_request = null, string $contentType = self::contentTypes['updateFormNotification'][0])
    {
        $request = $this->updateFormNotificationRequest($id, $update_form_notification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormNotification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormNotification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormNotification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormNotification';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormNotification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFormNotificationAsync
     *
     * Updates an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  \Staatic\Api\Model\UpdateFormNotificationRequest $update_form_notification_request Form notification properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormNotificationAsync($id, $update_form_notification_request = null, string $contentType = self::contentTypes['updateFormNotification'][0])
    {
        return $this->updateFormNotificationAsyncWithHttpInfo($id, $update_form_notification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFormNotificationAsyncWithHttpInfo
     *
     * Updates an existing form notification
     *
     * @param  string $id The form notification ID (required)
     * @param  \Staatic\Api\Model\UpdateFormNotificationRequest $update_form_notification_request Form notification properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormNotificationAsyncWithHttpInfo($id, $update_form_notification_request = null, string $contentType = self::contentTypes['updateFormNotification'][0])
    {
        $returnType = '\Staatic\Api\Model\FormNotification';
        $request = $this->updateFormNotificationRequest($id, $update_form_notification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFormNotification'
     *
     * @param  string $id The form notification ID (required)
     * @param  \Staatic\Api\Model\UpdateFormNotificationRequest $update_form_notification_request Form notification properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormNotificationRequest($id, $update_form_notification_request = null, string $contentType = self::contentTypes['updateFormNotification'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormNotification'
            );
        }



        $resourcePath = '/v1/form-notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_form_notification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_form_notification_request));
            } else {
                $httpBody = $update_form_notification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFormSubmission
     *
     * Updates an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  \Staatic\Api\Model\UpdateFormSubmissionRequest $update_form_submission_request Form submission properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function updateFormSubmission($id, $update_form_submission_request = null, string $contentType = self::contentTypes['updateFormSubmission'][0])
    {
        list($response) = $this->updateFormSubmissionWithHttpInfo($id, $update_form_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation updateFormSubmissionWithHttpInfo
     *
     * Updates an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  \Staatic\Api\Model\UpdateFormSubmissionRequest $update_form_submission_request Form submission properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormSubmission'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormSubmission|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormSubmissionWithHttpInfo($id, $update_form_submission_request = null, string $contentType = self::contentTypes['updateFormSubmission'][0])
    {
        $request = $this->updateFormSubmissionRequest($id, $update_form_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormSubmission' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormSubmission' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormSubmission', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormSubmission';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormSubmission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFormSubmissionAsync
     *
     * Updates an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  \Staatic\Api\Model\UpdateFormSubmissionRequest $update_form_submission_request Form submission properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmissionAsync($id, $update_form_submission_request = null, string $contentType = self::contentTypes['updateFormSubmission'][0])
    {
        return $this->updateFormSubmissionAsyncWithHttpInfo($id, $update_form_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFormSubmissionAsyncWithHttpInfo
     *
     * Updates an existing form submission
     *
     * @param  string $id The form submission ID (required)
     * @param  \Staatic\Api\Model\UpdateFormSubmissionRequest $update_form_submission_request Form submission properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormSubmissionAsyncWithHttpInfo($id, $update_form_submission_request = null, string $contentType = self::contentTypes['updateFormSubmission'][0])
    {
        $returnType = '\Staatic\Api\Model\FormSubmission';
        $request = $this->updateFormSubmissionRequest($id, $update_form_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFormSubmission'
     *
     * @param  string $id The form submission ID (required)
     * @param  \Staatic\Api\Model\UpdateFormSubmissionRequest $update_form_submission_request Form submission properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormSubmissionRequest($id, $update_form_submission_request = null, string $contentType = self::contentTypes['updateFormSubmission'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormSubmission'
            );
        }



        $resourcePath = '/v1/form-submissions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_form_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_form_submission_request));
            } else {
                $httpBody = $update_form_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFormTemplate
     *
     * Updates an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  \Staatic\Api\Model\UpdateFormTemplateRequest $update_form_template_request Form template properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError
     */
    public function updateFormTemplate($id, $update_form_template_request = null, string $contentType = self::contentTypes['updateFormTemplate'][0])
    {
        list($response) = $this->updateFormTemplateWithHttpInfo($id, $update_form_template_request, $contentType);
        return $response;
    }

    /**
     * Operation updateFormTemplateWithHttpInfo
     *
     * Updates an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  \Staatic\Api\Model\UpdateFormTemplateRequest $update_form_template_request Form template properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormTemplate'] to see the possible values for this operation
     *
     * @throws \Staatic\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Staatic\Api\Model\FormTemplate|\Staatic\Api\Model\Error|\Staatic\Api\Model\Error|\Staatic\Api\Model\UnprocessableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFormTemplateWithHttpInfo($id, $update_form_template_request = null, string $contentType = self::contentTypes['updateFormTemplate'][0])
    {
        $request = $this->updateFormTemplateRequest($id, $update_form_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Staatic\Api\Model\FormTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\FormTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\FormTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Staatic\Api\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Staatic\Api\Model\UnprocessableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Staatic\Api\Model\UnprocessableError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Staatic\Api\Model\UnprocessableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Staatic\Api\Model\FormTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\FormTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Staatic\Api\Model\UnprocessableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFormTemplateAsync
     *
     * Updates an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  \Staatic\Api\Model\UpdateFormTemplateRequest $update_form_template_request Form template properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormTemplateAsync($id, $update_form_template_request = null, string $contentType = self::contentTypes['updateFormTemplate'][0])
    {
        return $this->updateFormTemplateAsyncWithHttpInfo($id, $update_form_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFormTemplateAsyncWithHttpInfo
     *
     * Updates an existing form template
     *
     * @param  string $id The form template ID (required)
     * @param  \Staatic\Api\Model\UpdateFormTemplateRequest $update_form_template_request Form template properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFormTemplateAsyncWithHttpInfo($id, $update_form_template_request = null, string $contentType = self::contentTypes['updateFormTemplate'][0])
    {
        $returnType = '\Staatic\Api\Model\FormTemplate';
        $request = $this->updateFormTemplateRequest($id, $update_form_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFormTemplate'
     *
     * @param  string $id The form template ID (required)
     * @param  \Staatic\Api\Model\UpdateFormTemplateRequest $update_form_template_request Form template properties that need to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFormTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFormTemplateRequest($id, $update_form_template_request = null, string $contentType = self::contentTypes['updateFormTemplate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFormTemplate'
            );
        }



        $resourcePath = '/v1/form-templates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_form_template_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_form_template_request));
            } else {
                $httpBody = $update_form_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
